

from unittest import skip
import cv2
import csv
import cvzone
from cvzone.HandTrackingModule import HandDetector
import threading
import subprocess
import time
import pyautogui as PAG


# class RectangleScreen():
#     def __init__(self, screen_width, screen_height):
#         self.screen_width=screen_width
#         self.screen_height=screen_height

#         self.rectangle_width=screen_width/2
#         self.rectangle_height=screen_height/2

#         self.starting_pos=((screen_width-self.rectangle_width)/2,(screen_height-self.rectangle_height)/8)
#         self.ending_pos=[self.starting_pos[0]+self.rectangle_width, self.starting_pos[1]+self.rectangle_height]

#     def draw_rectangle(self):
#         cv2.rectangle(img, ([int(self.starting_pos[0]),int(self.starting_pos[1])]), ([int( self.ending_pos[0]),int( self.ending_pos[1])]), (0, 0, 255), 2)

class MyMouse():
    def __init__(self):
        print("init MyMouse")
    
    def update_Mouse_pos(self, new_mouse_position):
        # print(f"Moving mouse to position x = {new_mouse_position[0]}, y = {new_mouse_position[1]}")
        PAG.moveTo([new_mouse_position[0]*2,new_mouse_position[1]/2], _pause=False)

    # def calculate_mouse_position(self, mouse_pos, )


class MyHand():
    def __init__(self):
        print("Init MyHand")
        self.my_mouse=MyMouse()
    
    def update_hand_pos(self, new_forefinger_position):
        self.my_mouse.update_Mouse_pos(new_forefinger_position)

screen_width, screen_height= PAG.size()

detector = HandDetector()
ma_main=MyHand()
# my_rectangle=RectangleScreen(screen_width, screen_height)

cap = cv2.VideoCapture(0)
cap.set(3, screen_width)
cap.set(4, screen_height)

while True:
    success, img = cap.read()
    hands, img = detector.findHands(img, flipType=True)
    # my_rectangle.draw_rectangle()
    if hands:
        try:
            # print(type(hands[0]["lmList"][4][0]))
            thumb_tip_pos=[hands[0]["lmList"][4][0],hands[0]["lmList"][4][1]]
            forefinger_base_pos=[hands[0]["lmList"][5][0],hands[0]["lmList"][5][1]]
            forefinger_tip_pos=[hands[0]["lmList"][8][0],hands[0]["lmList"][8][1]]
            middle_finger_base_pos=[hands[0]["lmList"][9][0],hands[0]["lmList"][9][1]]
            middle_finger_tip_pos=[hands[0]["lmList"][12][0],hands[0]["lmList"][12][1]]
            # if forefinger_tip_pos[0]>=my_rectangle.starting_pos[0] and forefinger_tip_pos[0]<=my_rectangle.ending_pos[0] and forefinger_tip_pos[1]>=my_rectangle.starting_pos[1] and forefinger_tip_pos[1]<=my_rectangle.ending_pos[1]:
            # cv2.circle(img, thumb_tip_pos, 6, (0, 0, 255), -1)
            # cv2.circle(img, forefinger_base_pos, 6, (0, 0, 255), -1)
            cv2.circle(img, forefinger_tip_pos, 6, (0, 0, 255), -1)
            # cv2.circle(img, middle_finger_base_pos, 6, (0, 0, 255), -1)
            # cv2.circle(img, middle_finger_tip_pos, 6, (0, 0, 255), -1)
            ma_main.update_hand_pos(forefinger_tip_pos)
        except Exception as e:
            print(f"There was an error ! : {e}")

# ---------------------------------------------------------------
# |||||                 USE POINTS 4 5 8 9 12               |||||
# ---------------------------------------------------------------


    cv2.imshow('frame', img)
    key =cv2.waitKey(1)
    if key ==ord('q'):
        break

cv2.destroyAllWindows()